<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd
           ">
    <global-method-security secured-annotations="enabled"/>
    <!--登录页面不过滤 -->
    <!-- 该路径下的资源不用过滤 -->
    <http pattern="/resource/**" security="none" />
    <http pattern="/demo/**" security="none" />
    <http pattern="/login/**" security="none" />
    <http pattern="/error/**" security="none" />

    <!-- auto-config = true 则使用from-login. 如果不使用该属性 则默认为http-basic(没有session).-->
    <!-- lowercase-comparisons：表示URL比较前先转为小写。-->
    <!-- path-type：表示使用Apache Ant的匹配模式。-->
    <!-- access-denied-page：访问拒绝时转向的页面。-->
    <!-- access-decision-manager-ref：指定了自定义的访问策略管理器。-->
    <http auto-config='true' use-expressions="true">

        <intercept-url pattern="/index" access="hasRole('ROLE_USER')"/>
        <intercept-url pattern="/**" access="hasRole('ROLE_USER') and hasRole('ROLE_ADMIN')"/>

        <!-- login-page：指定登录页面。  -->
        <!-- login-processing-url：指定了客户在登录页面中按下 Sign In 按钮时要访问的 URL。-->
        <!-- authentication-failure-url：指定了身份验证失败时跳转到的页面。-->
        <!-- default-target-url：指定了成功进行身份验证和授权后默认呈现给用户的页面。-->
        <!-- always-use-default-target：指定了是否在身份验证通过后总是跳转到default-target-url属性指定的URL。-->
        <form-login login-page="/login"
                    authentication-failure-url="/login/verification?error=1"
                    login-processing-url="/j_spring_security_check"
                    authentication-success-handler-ref="authenticationSuccessHandler" />

        <!-- logout-url：指定了用于响应退出系统请求的URL。其默认值为：/j_spring_security_logout。-->
        <!-- logout-success-url：退出系统后转向的URL。-->
        <!-- invalidate-session：指定在退出系统时是否要销毁Session。-->
        <logout invalidate-session="true" logout-url="/logout" logout-success-url="/login"/>
        <access-denied-handler error-page="/error/noaccess"/>

        <!-- max-sessions:允许用户帐号登录的次数。范例限制用户只能登录一次。-->
        <!-- 此值表示：用户第二次登录时，前一次的登录信息都被清空。-->
        <!-- exception-if-maximum-exceeded:默认为false，-->
        <!-- 当exception-if-maximum-exceeded="true"时系统会拒绝第二次登录。-->
        <session-management invalid-session-url="/"
                            session-fixation-protection="none">
            <concurrency-control max-sessions="1"
                                 error-if-maximum-exceeded="false" />
        </session-management>
        <!--
        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
        -->
        <!-- 增加一个filter，这点与Acegi是不一样的，不能修改默认的filter了，
                这个filter位于FILTER_SECURITY_INTERCEPTOR之前  -->
        <custom-filter ref="eMallFilter" before="FILTER_SECURITY_INTERCEPTOR" />

        <csrf disabled="true"/>
        <headers>
            <frame-options policy="SAMEORIGIN" />
        </headers>
    </http>

    <!-- 启用表达式 为了后面的投票器做准备 -->
    <beans:bean
            class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"
            id="expressionHandler" />
    <beans:bean
            class="org.springframework.security.web.access.expression.WebExpressionVoter"
            id="expressionVoter">
        <beans:property name="expressionHandler" ref="expressionHandler" />
    </beans:bean>

    <!-- 认证管理器，使用自定义的UserDetailsService，并对密码采用md5加密 -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="eMallAuthenticationManager">
            <!-- 用户加密解密类  可以加点“盐”-->
            <password-encoder hash="md5">
                <!--<salt-source user-property="username"/>-->
            </password-encoder>
        </authentication-provider>
    </authentication-manager>

    <!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
    我们的所有控制将在这三个类中实现，解释详见具体配置  -->
    <beans:bean id="eMallFilter" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <beans:property name="securityMetadataSource" ref="securityMetadataSource"/><!-- FilterInvocationSecurityMetadataSource 接口实现类 -->
        <beans:property name="authenticationManager" ref="authenticationManager"/><!-- 鉴定管理类 -->
        <beans:property name="accessDecisionManager" ref="eMallAccessDecisionManager"/><!-- AccessDecisionManager 接口实现类 -->
    </beans:bean>

    <!-- 自定义登录成功后的处理程序及修改默认验证地址 -->
    <beans:bean id="authenticationSuccessHandler" class="com.emall.security.service.impl.EMallLoginSuccessHandlerImpl">
        <beans:property name="defaultTargetUrl" value="/index"/>
        <beans:property name="forwardToDestination" value="true"/>
    </beans:bean>

    <!-- 实现用户认证的入口，主要实现UserDetailsService接口即可 -->
    <beans:bean id="eMallAuthenticationManager" class="com.emall.security.service.impl.EMallAuthenticationServiceImpl"/>
    <!-- 权限抉择接口 -->
    <beans:bean id="eMallAccessDecisionManager" class="com.emall.security.service.impl.EMallAccessDecisionServiceImpl"/>
    <!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问     -->
    <beans:bean id="securityMetadataSource" class="com.emall.security.service.impl.EMallMetadataSourceServiceImpl" />

</beans:beans>